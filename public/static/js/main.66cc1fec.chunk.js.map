{"version":3,"sources":["router/router.js","Menu.js","NotFound/index.js","App.js","serviceWorker.js","service.js","AppStore.js","index.js"],"names":["Loading","router","path","name","component","Loadable","loader","__webpack_require__","e","then","bind","loading","Menu","react_default","a","createElement","className","routers","map","route","i","react_router_dom","to","key","Component","App","createBrowserHistory","inject","observer","this","props","store","title","index_module","src_Menu","react_router","exact","NotFound","Boolean","window","location","hostname","match","localhost","_callee","url","method","body","regenerator_default","wrap","_context","prev","next","axios","baseURL","data","headers","X-Requested-With","Accept","apiCheckSum","ApiKey","response","console","log","status","alert","statusText","catch","error","request","message","dir","abrupt","sent","stop","Todo","_this","Object","classCallCheck","id","Math","random","finished","fetchProjectsSuccess","fetchPro","_x","_x2","_x3","_fetchRequest","apply","arguments","Fetch","login_name","password","res","decorate","observable","action","AppStore","ReactDOM","render","Store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.66cc1fec.chunk.js","sourcesContent":["import Loadable from 'react-loadable';\r\nconst Loading = () => \"<div>Loading...</div>\";\r\n\r\n\r\nconst TodoView = Loadable({\r\n    loader: () => import('../home/home/index'),\r\n    loading: Loading,\r\n});\r\n\r\nconst About = Loadable({\r\n    loader: () => import('../About/About/index'),\r\n    loading: Loading,\r\n});\r\nexport default [\r\n    {\r\n        path: '/',\r\n        name: 'TodoList',\r\n        component: TodoView\r\n    },\r\n    {\r\n        path: '/page/about',\r\n        name: 'About',\r\n        component: About\r\n    }\r\n]","import React, {Component} from 'react';\r\nimport routers from './router/router';\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass Menu extends Component{\r\n    render(){\r\n        return(\r\n            <ul className='menu'>\r\n                {routers.map(function (route, i) {\r\n                    return <Link to={route.path} key={i}>\r\n                        <li>{route.name}</li>\r\n                    </Link>\r\n                })}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Menu;","import React, { Component } from 'react';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <header>\r\n                    <div>\r\n                        404\r\n                    </div>\r\n                </header>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\nimport { Provider ,observer,inject } from 'mobx-react'\nimport { HashRouter } from 'react-router-dom'\nimport { Router,Switch, Route } from 'react-router'\nimport './App.css';\nimport routers from './router/router';\nimport Menu from './Menu';\nimport NotFound from './NotFound/index';\nimport { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\n\n@inject(\"store\") @observer\nclass App extends Component {\n    render() {\n        const { store:{title} } = this.props;\n        return (\n            <Provider {...this.props}>\n                <HashRouter>\n                    <div>\n                        <Menu />\n                        {/*这是左侧导航栏*/}\n                        <Switch>\n                            {routers.map((route, i) => {\n                                return <Route key={i} exact path={route.path} component={route.component}/>\n                            })}\n                            <Route component={NotFound}/>\n                        </Switch>\n                    </div>\n                </HashRouter>\n            </Provider>\n\n        );\n    }\n}\n\nexport default App;\n// history={history}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from 'axios';\r\n\r\nconst foodstp = \"https://foodstp.com/\";\r\nconst localhost = \"http://localhost:3000/\";\r\n\r\nexport default async function fetchRequest(url,method,body) {\r\n     return await axios({\r\n         method: method,\r\n         url: url,\r\n         baseURL: localhost,\r\n         data: body,\r\n         headers: {'X-Requested-With': 'XMLHttpRequest','Accept':\"*/*\",'apiCheckSum':'b5a2961c7165bd9c466847cc206b6d94','ApiKey':'88d85d8a6b9d4e409e817dca1c2cd1fb'},\r\n     }).then(function (response) {\r\n         console.log(response);\r\n         if(response.status === 200 || response.status === 304){\r\n             return response.data;\r\n         }else {\r\n             alert(response.statusText)\r\n         }\r\n     }).catch(function (error) {\r\n         if (error.response) {\r\n             // The request was made and the server responded with a status code\r\n             // that falls out of the range of 2xx\r\n             console.log(error.response.data);\r\n             console.log(error.response.status);\r\n             console.log(error.response.headers);\r\n         } else if (error.request) {\r\n             // The request was made but no response was received\r\n             // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\r\n             // http.ClientRequest in node.js\r\n             console.log(error.request);\r\n             alert(\"已提出请求，但未收到答复\")\r\n         } else {\r\n             // Something happened in setting up the request that triggered an Error\r\n             alert(error.message);\r\n         }\r\n         //console.log(error.config);\r\n         console.dir(error);\r\n     });\r\n\r\n}","import { decorate, observable, action } from \"mobx\";\r\nimport Fetch from \"./service\";\r\n//import List from './Mock/list.json';\r\n\r\nclass Todo {\r\n    constructor() {\r\n\r\n    }\r\n    id = Math.random();\r\n    title = \"app全局\";\r\n    finished = false;\r\n    fetchProjectsSuccess=()=>{console.log(\"执行动作，\",this.id);this.title = \"被子组件更改\"};\r\n    fetchPro = () =>{\r\n        Fetch(\"webapi/api/login\",\"post\",{login_name:\"12345678911\",password:\"123456\"}).then(function (res) {\r\n            console.log(res)\r\n        })\r\n        // 获取远端图片\r\n\r\n\r\n    }\r\n\r\n}\r\ndecorate(Todo, {\r\n    title: observable,\r\n    finished: observable,\r\n    fetchProjectsSuccess:action,\r\n    fetchPro:action\r\n});\r\nexport default new Todo();","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Store from './AppStore';\n\nReactDOM.render(<App store={Store} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}