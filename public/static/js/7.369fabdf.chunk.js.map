{"version":3,"sources":["User/Register/index.js"],"names":["FormItem","antd_es_form__WEBPACK_IMPORTED_MODULE_23__","Item","Option","InputGroup","antd_es_input__WEBPACK_IMPORTED_MODULE_19__","Group","passwordProgressMap","ok","pass","poor","PAGE_NAME_UPPER_CAMEL_CASE","state","count","confirmDirty","visible","help","prefix","interval","undefined","onGetCaptcha","_this","setState","window","setInterval","clearInterval","getPasswordStatus","value","props","form","getFieldValue","length","handleSubmit","e","preventDefault","_this$props","dispatch","validateFields","force","err","values","type","payload","Object","F_project_react_mobx_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_12__","checkConfirm","rule","callback","checkPassword","_this$state","changePrefix","renderPasswordProgress","passwordStatus","react__WEBPACK_IMPORTED_MODULE_24___default","a","createElement","className","styles","concat","antd_es_progress__WEBPACK_IMPORTED_MODULE_11__","status","progress","strokeWidth","percent","showInfo","_this$props2","this","BLOCK_NAME_CAMEL_CASE","account","antd_es_message__WEBPACK_IMPORTED_MODULE_9__","success","router","push","pathname","_this$props3","submitting","getFieldDecorator","_this$state2","main","onSubmit","rules","required","message","size","placeholder","antd_es_popover__WEBPACK_IMPORTED_MODULE_7__","getPopupContainer","node","parentNode","content","style","padding","marginTop","overlayStyle","width","placement","validator","compact","antd_es_select__WEBPACK_IMPORTED_MODULE_21__","onChange","pattern","antd_es_row__WEBPACK_IMPORTED_MODULE_1__","gutter","antd_es_col__WEBPACK_IMPORTED_MODULE_5__","span","antd_es_button__WEBPACK_IMPORTED_MODULE_3__","disabled","getCaptcha","onClick","loading","submit","htmlType","react_router_dom__WEBPACK_IMPORTED_MODULE_25__","login","to","Component","__webpack_exports__","create"],"mappings":"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","file":"static/js/7.369fabdf.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Col, Form, Input, Popover, Progress, Row, Select, message } from 'antd';\nimport { FormComponentProps } from 'antd/es/form';\nimport { Link } from 'react-router-dom'\nimport router from '../../router/router';\n\nimport styles from './style.less';\n\nconst FormItem = Form.Item;\nconst { Option } = Select;\nconst InputGroup = Input.Group;\n\n\nconst passwordProgressMap: {\n    ok: 'success';\n    pass: 'normal';\n    poor: 'exception';\n} = {\n    ok: 'success',\n    pass: 'normal',\n    poor: 'exception',\n};\n\ninterface PAGE_NAME_UPPER_CAMEL_CASEState {\n    count: number;\n    confirmDirty: boolean;\n    visible: boolean;\n    help: string;\n    prefix: string;\n}\n\nclass PAGE_NAME_UPPER_CAMEL_CASE extends Component {\n    state: PAGE_NAME_UPPER_CAMEL_CASEState = {\n        count: 0,\n        confirmDirty: false,\n        visible: false,\n        help: '',\n        prefix: '86',\n    };\n\n    interval: number | undefined = undefined;\n\n    componentDidUpdate() {\n        const { BLOCK_NAME_CAMEL_CASE, form } = this.props;\n        const account = form.getFieldValue('mail');\n        if (BLOCK_NAME_CAMEL_CASE.status === 'ok') {\n            message.success('注册成功！');\n            router.push({\n                pathname: '/user/register-result',\n                state: {\n                    account,\n                },\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    onGetCaptcha = () => {\n        let count = 59;\n        this.setState({ count });\n        this.interval = window.setInterval(() => {\n            count -= 1;\n            this.setState({ count });\n            if (count === 0) {\n                clearInterval(this.interval);\n            }\n        }, 1000);\n    };\n\n    getPasswordStatus = () => {\n        const { form } = this.props;\n        const value = form.getFieldValue('password');\n        if (value && value.length > 9) {\n            return 'ok';\n        }\n        if (value && value.length > 5) {\n            return 'pass';\n        }\n        return 'poor';\n    };\n\n    handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n        const { form, dispatch } = this.props;\n        form.validateFields({ force: true }, (err, values) => {\n            if (!err) {\n                const { prefix } = this.state;\n                dispatch({\n                    type: 'BLOCK_NAME_CAMEL_CASE/submit',\n                    payload: {\n                        ...values,\n                        prefix,\n                    },\n                });\n            }\n        });\n    };\n\n    checkConfirm = (rule: any, value: string, callback: (messgae?: string) => void) => {\n        const { form } = this.props;\n        if (value && value !== form.getFieldValue('password')) {\n            callback('BLOCK_NAME.password.twice');\n        } else {\n            callback();\n        }\n};\n\n    checkPassword = (rule: any, value: string, callback: (messgae?: string) => void) => {\n        const { visible, confirmDirty } = this.state;\n        if (!value) {\n            this.setState({\n                help: 'BLOCK_NAME.password.required',\n                visible: !!value,\n            });\n            callback('error');\n        } else {\n            this.setState({\n                help: '',\n            });\n            if (!visible) {\n                this.setState({\n                    visible: !!value,\n                });\n            }\n            if (value.length < 6) {\n                callback('error');\n            } else {\n                const { form } = this.props;\n                if (value && confirmDirty) {\n                    form.validateFields(['confirm'], { force: true });\n                }\n                callback();\n            }\n        }\n    };\n\n    changePrefix = (value: string) => {\n        this.setState({\n            prefix: value,\n        });\n    };\n\n    renderPasswordProgress = () => {\n        const { form } = this.props;\n        const value = form.getFieldValue('password');\n        const passwordStatus = this.getPasswordStatus();\n        return value && value.length ? (\n            <div className={styles[`progress-${passwordStatus}`]}>\n                <Progress\n                    status={passwordProgressMap[passwordStatus]}\n                    className={styles.progress}\n                    strokeWidth={6}\n                    percent={value.length * 10 > 100 ? 100 : value.length * 10}\n                    showInfo={false}\n                />\n            </div>\n        ) : null;\n    };\n\n    render() {\n        const { form, submitting } = this.props;\n        const { getFieldDecorator } = form;\n        const { count, prefix, help, visible } = this.state;\n        return (\n            <div className={styles.main}>\n                <h3>\n                    BLOCK_NAME.register.register\n                </h3>\n                <Form onSubmit={this.handleSubmit}>\n                    <FormItem>\n                        {getFieldDecorator('mail', {\n                            rules: [\n                                {\n                                    required: true,\n                                    message: 'BLOCK_NAME.email.required'\n                                },\n                                {\n                                    type: 'email',\n                                    message: 'BLOCK_NAME.email.wrong-format'\n                                },\n                            ],\n                        })(\n                            <Input\n                                size=\"large\"\n                                placeholder='BLOCK_NAME.email.placeholder'\n                            />,\n                        )}\n                    </FormItem>\n                    <FormItem help={help}>\n                        <Popover\n                            getPopupContainer={node => {\n                                if (node && node.parentNode) {\n                                    return node.parentNode;\n                                }\n                                return node;\n                            }}\n                            content={\n                                <div style={{ padding: '4px 0' }}>\n                                    \"passwordStatusMap[this.getPasswordStatus\"\n                                    {this.renderPasswordProgress()}\n                                    <div style={{ marginTop: 10 }}>\n                                        \"BLOCK_NAME.strength.msg\"\n                                    </div>\n                                </div>\n                            }\n                            overlayStyle={{ width: 240 }}\n                            placement=\"right\"\n                            visible={visible}\n                        >\n                            {getFieldDecorator('password', {\n                                rules: [\n                                    {\n                                        validator: this.checkPassword,\n                                    },\n                                ],\n                            })(\n                                <Input\n                                    size=\"large\"\n                                    type=\"password\"\n                                    placeholder='BLOCK_NAME.password.placeholder'\n                                />,\n                            )}\n                        </Popover>\n                    </FormItem>\n                    <FormItem>\n                        {getFieldDecorator('confirm', {\n                            rules: [\n                                {\n                                    required: true,\n                                    message: 'BLOCK_NAME.confirm-password.required',\n                                },\n                                {\n                                    validator: this.checkConfirm,\n                                },\n                            ],\n                        })(\n                            <Input\n                                size=\"large\"\n                                type=\"password\"\n                                placeholder='BLOCK_NAME.confirm-password.placeholder'\n                            />,\n                        )}\n                    </FormItem>\n                    <FormItem>\n                        <InputGroup compact>\n                            <Select\n                                size=\"large\"\n                                value={prefix}\n                                onChange={this.changePrefix}\n                                style={{ width: '20%' }}\n                            >\n                                <Option value=\"86\">+86</Option>\n                                <Option value=\"87\">+87</Option>\n                            </Select>\n                            {getFieldDecorator('mobile', {\n                                rules: [\n                                    {\n                                        required: true,\n                                        message: 'BLOCK_NAME.phone-number.required',\n                                    },\n                                    {\n                                        pattern: /^\\d{11}$/,\n                                        message: 'BLOCK_NAME.phone-number.wrong-format',\n                                    },\n                                ],\n                            })(\n                                <Input\n                                    size=\"large\"\n                                    style={{ width: '80%' }}\n                                    placeholder='BLOCK_NAME.phone-number.placeholder'\n                                />,\n                            )}\n                        </InputGroup>\n                    </FormItem>\n                    <FormItem>\n                        <Row gutter={8}>\n                            <Col span={16}>\n                                {getFieldDecorator('captcha', {\n                                    rules: [\n                                        {\n                                            required: true,\n                                            message: 'BLOCK_NAME.verification-code.required',\n                                        },\n                                    ],\n                                })(\n                                    <Input\n                                        size=\"large\"\n                                        placeholder='BLOCK_NAME.verification-code.placeholder'\n                                    />,\n                                )}\n                            </Col>\n                            <Col span={8}>\n                                <Button\n                                    size=\"large\"\n                                    disabled={!!count}\n                                    className={styles.getCaptcha}\n                                    onClick={this.onGetCaptcha}\n                                >\n                                    {count\n                                        ? `${count} s`\n                                        : \"BLOCK_NAME.register.get-verification-code\"}\n                                </Button>\n                            </Col>\n                        </Row>\n                    </FormItem>\n                    <FormItem>\n                        <Button\n                            size=\"large\"\n                            loading={submitting}\n                            className={styles.submit}\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                        >\n                            点击注册\n                        </Button>\n                        <Link className={styles.login} to=\"/user/login\">\n                            返回登录页\n                        </Link>\n                    </FormItem>\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport default Form.create()(PAGE_NAME_UPPER_CAMEL_CASE);"],"sourceRoot":""}